diff '--color=auto' -aruN a/kernel-open/conftest.sh b/kernel-open/conftest.sh
--- a/kernel-open/conftest.sh	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/conftest.sh	2025-01-23 21:14:55.626775245 +0000
@@ -6615,6 +6615,8 @@
             # Added by commit 2916059147ea ("drm/aperture: Add infrastructure
             # for aperture ownership") in v5.14.
             #
+            # Removed by commit 689274a56c0c ("drm: Remove DRM aperture helpers") in v6.13.
+            #
             CODE="
             #if defined(NV_DRM_DRM_APERTURE_H_PRESENT)
             #include <drm/drm_aperture.h>
@@ -6626,6 +6628,23 @@
             compile_check_conftest "$CODE" "NV_DRM_APERTURE_REMOVE_CONFLICTING_PCI_FRAMEBUFFERS_PRESENT" "" "functions"
         ;;
 
+        aperture_remove_conflicting_pci_devices)
+            #
+            # Determine whether aperture_remove_conflicting_pci_devices is present.
+            #
+            # Added by commit 7283f862bd99 ("drm: Implement DRM aperture helpers under video/") in v6.0.
+            #
+            CODE="
+            #if defined(NV_LINUX_APERTURE_H_PRESENT)
+            #include <linux/aperture.h>
+            #endif
+            void conftest_aperture_remove_conflicting_pci_devices(void) {
+                aperture_remove_conflicting_pci_devices();
+            }"
+
+            compile_check_conftest "$CODE" "NV_APERTURE_REMOVE_CONFLICTING_PCI_DEVICES_PRESENT" "" "functions"
+        ;;
+
         drm_aperture_remove_conflicting_pci_framebuffers_has_driver_arg)
             #
             # Determine whether drm_aperture_remove_conflicting_pci_framebuffers
@@ -6721,6 +6740,47 @@
             compile_check_conftest "$CODE" "NV_CRYPTO_PRESENT" "" "symbols"
         ;;
 
+        crypto_akcipher_verify)
+            #
+            # Determine whether the crypto_akcipher_verify API is still present.
+            # It was removed by commit 6b34562 ('crypto: akcipher - Drop sign/verify operations')
+            # in v6.13-rc1 (2024-10-04).
+            #
+            # This test is dependent on the crypto conftest to determine whether crypto should be
+            # enabled at all. That means that if the kernel is old enough such that crypto_akcipher_verify
+            #
+            # The test merely checks for the presence of the API, as it assumes that if the API
+            # is no longer present, the new API to replace it (crypto_sig_verify) must be present.
+            # If the kernel version is too old to have crypto_akcipher_verify, it will fail the crypto
+            # conftest above and all crypto code will be compiled out.
+            #
+            CODE="
+            #include <crypto/akcipher.h>
+            #include <linux/crypto.h>
+            void conftest_crypto_akcipher_verify(void) {
+                (void)crypto_akcipher_verify;
+            }"
+
+            compile_check_conftest "$CODE" "NV_CRYPTO_AKCIPHER_VERIFY_PRESENT" "" "symbols"
+            ;;
+
+        ecc_digits_from_bytes)
+            #
+            # Determine whether ecc_digits_from_bytes is present.
+            # It was added in commit c6ab5c915da4 ('crypto: ecc - Prevent ecc_digits_from_bytes from
+            # reading too many bytes') in v6.10.
+            #
+            # This functionality is needed when crypto_akcipher_verify is not present.
+            #
+            CODE="
+            #include <crypto/internal/ecc.h>
+            void conftest_ecc_digits_from_bytes(void) {
+                (void)ecc_digits_from_bytes;
+            }"
+
+            compile_check_conftest "$CODE" "NV_ECC_DIGITS_FROM_BYTES_PRESENT" "" "symbols"
+        ;;
+
         mempolicy_has_unified_nodes)
             #
             # Determine if the 'mempolicy' structure has
diff '--color=auto' -aruN a/kernel-open/header-presence-tests.mk b/kernel-open/header-presence-tests.mk
--- a/kernel-open/header-presence-tests.mk	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/header-presence-tests.mk	2025-01-23 21:14:55.626775245 +0000
@@ -34,6 +34,7 @@
   generated/autoconf.h \
   generated/compile.h \
   generated/utsrelease.h \
+  linux/aperture.h \
   linux/efi.h \
   linux/kconfig.h \
   linux/platform/tegra/mc_utils.h \
diff '--color=auto' -aruN a/kernel-open/Kbuild b/kernel-open/Kbuild
--- a/kernel-open/Kbuild	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/Kbuild	2025-01-23 21:14:16.732129698 +0000
@@ -57,6 +57,20 @@
  UBSAN_SANITIZE := y
 endif
 
+#
+# Command to create a symbolic link, explicitly resolving the symlink target
+# to an absolute path to abstract away the difference between Linux < 6.13,
+# where the CWD is the Linux kernel source tree for Kbuild extmod builds, and
+# Linux >= 6.13, where the CWD is the external module source tree.
+#
+# This is used to create the nv*-kernel.o -> nv*-kernel.o_binary symlinks for
+# kernel modules which use precompiled binary object files.
+#
+
+quiet_cmd_symlink = SYMLINK $@
+ cmd_symlink = ln -sf $(abspath $<) $@
+
+
 $(foreach _module, $(NV_KERNEL_MODULES), \
  $(eval include $(src)/$(_module)/$(_module).Kbuild))
 
diff '--color=auto' -aruN a/kernel-open/nvidia/internal_crypt_lib.h b/kernel-open/nvidia/internal_crypt_lib.h
--- a/kernel-open/nvidia/internal_crypt_lib.h	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/nvidia/internal_crypt_lib.h	2025-01-23 21:14:03.098337946 +0000
@@ -64,7 +64,9 @@
  * old or even just user disabled. If we should use LKCA, include headers, else
  * define stubs to return errors.
  */
-#if defined(NV_CRYPTO_PRESENT) && defined (NV_CONFIG_CRYPTO_PRESENT)
+#if defined(NV_CRYPTO_PRESENT) && defined (NV_CONFIG_CRYPTO_PRESENT) && \
+    (defined(NV_CRYPTO_AKCIPHER_VERIFY_PRESENT) || \
+     (defined(NV_CRYPTO_SIG_H_PRESENT) && defined(NV_ECC_DIGITS_FROM_BYTES_PRESENT)))
 #define USE_LKCA 1
 #endif
 
diff '--color=auto' -aruN a/kernel-open/nvidia/libspdm_ecc.c b/kernel-open/nvidia/libspdm_ecc.c
--- a/kernel-open/nvidia/libspdm_ecc.c	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/nvidia/libspdm_ecc.c	2025-01-23 21:14:03.098337946 +0000
@@ -30,14 +30,26 @@
 #include <crypto/akcipher.h>
 #include <crypto/ecdh.h>
 #include <crypto/internal/ecc.h>
+#ifndef NV_CRYPTO_AKCIPHER_VERIFY_PRESENT
+#include <crypto/sig.h>
+
+struct signature
+{
+    u64 r[ECC_MAX_DIGITS];
+    u64 s[ECC_MAX_DIGITS];
+};
+#endif // NV_CRYPTO_AKCIPHER_VERIFY_PRESENT
+
+#define ECDSA_PUBKEY_HEADER_XY_PRESENT (0x4)
 
 struct ecc_ctx {
     unsigned int curve_id;
     u64 priv_key[ECC_MAX_DIGITS]; // In big endian
 
     struct {
-        // ecdsa wants byte preceding pub_key to be set to '4'
-        u64 pub_key_prefix;
+        // ecdsa pubkey has header indicating length of pubkey
+        u8  padding[7];
+        u8  pub_key_prefix;
         u64 pub_key[2 * ECC_MAX_DIGITS];
     };
 
@@ -221,25 +233,84 @@
 #endif
 }
 
-bool lkca_ecdsa_verify(void *ec_context, size_t hash_nid,
-                       const uint8_t *message_hash, size_t hash_size,
-                       const uint8_t *signature, size_t sig_size)
+#ifndef NV_CRYPTO_AKCIPHER_VERIFY_PRESENT
+static bool lkca_ecdsa_verify_crypto_sig(void *ec_context, size_t hash_nid,
+                                         const uint8_t *message_hash, size_t hash_size,
+                                         const uint8_t *signature, size_t sig_size)
 {
 #ifndef USE_LKCA
     return false;
 #else
     struct ecc_ctx *ctx = ec_context;
+    u8 *pub_key;
+    int err;
+    DECLARE_CRYPTO_WAIT(wait);
+    struct crypto_sig * tfm = NULL;
+    struct signature sig;
+
+    if (sig_size != ctx->size || !ctx->pub_key_set)
+    {
+        return false;
+    }
+
+    tfm = crypto_alloc_sig(ctx->name, CRYPTO_ALG_TYPE_SIG, 0);
+    if (IS_ERR(tfm)) {
+        pr_info("crypto_alloc_sig failed in lkca_ecdsa_verify\n");
+        return false;
+    }
+
+    // modify header of pubkey to indicate size
+    pub_key = (u8 *) &(ctx->pub_key_prefix);
+    *pub_key = ECDSA_PUBKEY_HEADER_XY_PRESENT;
+    err = crypto_sig_set_pubkey(tfm, pub_key, ctx->size + 1);
+    if (err != 0)
+    {
+        pr_info("crypto_sig_set_pubkey failed in lkca_ecdsa_verify: %d", -err);
+        goto failTfm;
+    }
+
+    //
+    // Compared to the way we receive the signature, we need to:
+    // - swap order of all digits
+    // - swap endianness for each digit
+    //
+    memset(&sig, 0, sizeof(sig));
+    ecc_digits_from_bytes(signature, ctx->size/2, sig.r, ECC_MAX_DIGITS);
+    ecc_digits_from_bytes(signature + ctx->size/2, ctx->size/2, sig.s, ECC_MAX_DIGITS);
+
+    err = crypto_sig_verify(tfm, (void *)&sig, sizeof(sig), message_hash, hash_size);
+    if (err != 0)
+    {
+        pr_info("crypto_sig_verify failed in lkca_ecdsa_verify %d\n", -err);
+    }
+
+failTfm:
+    crypto_free_sig(tfm);
+
+    return err == 0;
+#endif // USE_LKCA
+}
+
+#else // NV_CRYPTO_AKCIPHER_VERIFY_PRESENT
+static bool lkca_ecdsa_verify_akcipher(void *ec_context, size_t hash_nid,
+                                       const uint8_t *message_hash, size_t hash_size,
+                                       const uint8_t *signature, size_t sig_size)
+{
+#ifndef USE_LKCA
+    return false;
+#else // USE_LKCA
+    struct ecc_ctx *ctx = ec_context;
+    u8 *pub_key;
+    int err;
+    DECLARE_CRYPTO_WAIT(wait);
 
     // Roundabout way
     u64 ber_max_len = 3 + 2 * (4 + (ECC_MAX_BYTES));
     u64 ber_len = 0;
     u8 *ber = NULL;
-    u8 *pub_key;
     struct akcipher_request *req = NULL;
     struct crypto_akcipher *tfm = NULL;
     struct scatterlist sg;
-    DECLARE_CRYPTO_WAIT(wait);
-    int err;
 
     if (sig_size != ctx->size) {
         return false;
@@ -251,21 +322,21 @@
 
     tfm = crypto_alloc_akcipher(ctx->name, CRYPTO_ALG_TYPE_AKCIPHER, 0);
     if (IS_ERR(tfm)) {
-        pr_info("ALLOC FAILED\n");
+        pr_info("crypto_alloc_akcipher failed in lkca_ecdsa_verify\n");
         return false;
     }
 
-    pub_key = (u8 *) ctx->pub_key;
-    pub_key--; // Go back into byte of pub_key_prefix
-    *pub_key = 4; // And set it to 4 to placate kernel
+    // modify header of pubkey to indicate size
+    pub_key = (u8 *) &(ctx->pub_key_prefix);
+    *pub_key = ECDSA_PUBKEY_HEADER_XY_PRESENT;
     if ((err = crypto_akcipher_set_pub_key(tfm, pub_key, ctx->size + 1)) != 0) {
-        pr_info("SET PUB KEY FAILED: %d\n", -err);
+        pr_info("crypto_akcipher_set_pub_key failed in lkca_ecdsa_verify: %d\n", -err);
         goto failTfm;
     }
 
     req = akcipher_request_alloc(tfm, GFP_KERNEL);
     if (IS_ERR(req)) {
-        pr_info("REQUEST ALLOC FAILED\n");
+        pr_info("akcipher_request_alloc failed in lkca_ecdsa_verify\n");
         goto failTfm;
     }
 
@@ -310,9 +381,8 @@
                                   CRYPTO_TFM_REQ_MAY_SLEEP, crypto_req_done, &wait);
     akcipher_request_set_crypt(req, &sg, NULL, ber_len, hash_size);
     err = crypto_wait_req(crypto_akcipher_verify(req), &wait);
-
     if (err != 0){
-        pr_info("Verify FAILED %d\n", -err);
+        pr_info("crypto_akcipher_verify failed in lkca_ecdsa_verify %d\n", -err);
     }
 
     kfree(ber);
@@ -322,5 +392,19 @@
     crypto_free_akcipher(tfm);
 
     return err == 0;
-#endif
+#endif // USE_LKCA
+}
+#endif // NV_CRYPTO_AKCIPHER_VERIFY_PRESENT
+
+bool lkca_ecdsa_verify(void *ec_context, size_t hash_nid,
+                       const uint8_t *message_hash, size_t hash_size,
+                       const uint8_t *signature, size_t sig_size)
+{
+#ifndef NV_CRYPTO_AKCIPHER_VERIFY_PRESENT
+    return lkca_ecdsa_verify_crypto_sig(ec_context, hash_nid, message_hash, hash_size,
+                                        signature, sig_size);
+#else // NV_CRYPTO_AKCIPHER_VERIFY_PRESENT
+    return lkca_ecdsa_verify_akcipher(ec_context, hash_nid, message_hash, hash_size,
+                                      signature, sig_size);
+#endif // NV_CRYPTO_AKCIPHER_VERIFY_PRESENT
 }
diff '--color=auto' -aruN a/kernel-open/nvidia/nv.c b/kernel-open/nvidia/nv.c
--- a/kernel-open/nvidia/nv.c	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/nvidia/nv.c	2025-01-23 21:14:10.421917422 +0000
@@ -22,6 +22,7 @@
  */
 
 #include <linux/module.h>  // for MODULE_FIRMWARE
+#include <linux/version.h>
 
 // must precede "nv.h" and "nv-firmware.h" includes
 #define NV_FIRMWARE_FOR_NAME(name)  "nvidia/" NV_VERSION_STRING "/" name ".bin"
@@ -127,7 +128,11 @@
  * DMA_BUF namespace is added by commit id 16b0314aa746
  * ("dma-buf: move dma-buf symbols into the DMA_BUF module namespace") in 5.16
  */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 13, 0)
+MODULE_IMPORT_NS("DMA_BUF");
+#else
 MODULE_IMPORT_NS(DMA_BUF);
+#endif
 #endif  // defined(MODULE_IMPORT_NS)
 
 const NvBool nv_is_rm_firmware_supported_os = NV_TRUE;
diff '--color=auto' -aruN a/kernel-open/nvidia/nvidia.Kbuild b/kernel-open/nvidia/nvidia.Kbuild
--- a/kernel-open/nvidia/nvidia.Kbuild	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/nvidia/nvidia.Kbuild	2025-01-23 21:14:16.732129698 +0000
@@ -40,9 +40,6 @@
 NVIDIA_BINARY_OBJECT := $(src)/nvidia/nv-kernel.o_binary
 NVIDIA_BINARY_OBJECT_O := nvidia/nv-kernel.o
 
-quiet_cmd_symlink = SYMLINK $@
- cmd_symlink = ln -sf $< $@
-
 targets += $(NVIDIA_BINARY_OBJECT_O)
 
 $(obj)/$(NVIDIA_BINARY_OBJECT_O): $(NVIDIA_BINARY_OBJECT) FORCE
diff '--color=auto' -aruN a/kernel-open/nvidia-drm/nvidia-drm-drv.c b/kernel-open/nvidia-drm/nvidia-drm-drv.c
--- a/kernel-open/nvidia-drm/nvidia-drm-drv.c	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/nvidia-drm/nvidia-drm-drv.c	2025-01-23 21:15:00.816950813 +0000
@@ -65,7 +65,16 @@
 #endif
 
 #if defined(NV_DRM_FBDEV_AVAILABLE)
+// Commit 7283f862bd99 ("drm: Implement DRM aperture helpers under video/")
+//  moved implementation of drm_aperture_... to linux/aperture.c.
+// Commit 689274a56c0c ("drm: Remove DRM aperture helpers")
+//  removed drm/drm_aperture.h.
+#if defined(NV_DRM_APERTURE_REMOVE_CONFLICTING_PCI_FRAMEBUFFERS_PRESENT)
 #include <drm/drm_aperture.h>
+#endif
+#if defined(NV_APERTURE_REMOVE_CONFLICTING_PCI_DEVICES_PRESENT)
+#include <linux/aperture.h>
+#endif
 #include <drm/drm_fb_helper.h>
 #endif
 
@@ -1942,7 +1951,60 @@
 #endif /* NV_DRM_ATOMIC_MODESET_AVAILABLE */
 }
 
+#if !defined(NV_DRM_FBDEV_TTM_AVAILABLE) &&                                    \
+    !defined(NV_DRM_FBDEV_GENERIC_AVAILABLE)
+// AOSC OS: Workaround for Linux 6.13+
 
+static const struct drm_fb_helper_funcs nv_drm_fbdev_helper_funcs = {
+    .fb_probe = drm_fbdev_ttm_driver_fbdev_probe,
+};
+
+static void nv_drm_fbdev_client_unregister(struct drm_client_dev *client)
+{
+	struct drm_fb_helper *fb_helper = drm_fb_helper_from_client(client);
+	if (fb_helper->info) {
+		drm_fb_helper_unregister_info(fb_helper);
+	} else {
+		drm_client_release(&fb_helper->client);
+		drm_fb_helper_unprepare(fb_helper);
+		kfree(fb_helper);
+	}
+}
+static int nv_drm_fbdev_client_restore(struct drm_client_dev *client)
+{
+	drm_fb_helper_lastclose(client->dev);
+	return 0;
+}
+static int nv_drm_fbdev_client_hotplug(struct drm_client_dev *client)
+{
+	struct drm_fb_helper *fb_helper = drm_fb_helper_from_client(client);
+	struct drm_device *dev = client->dev;
+	int ret;
+	if (dev->fb_helper)
+		return drm_fb_helper_hotplug_event(dev->fb_helper);
+	ret = drm_fb_helper_init(dev, fb_helper);
+	if (ret)
+		goto err_drm_err;
+	if (!drm_drv_uses_atomic_modeset(dev))
+		drm_helper_disable_unused_functions(dev);
+	ret = drm_fb_helper_initial_config(fb_helper);
+	if (ret)
+		goto err_drm_fb_helper_fini;
+	return 0;
+err_drm_fb_helper_fini:
+	drm_fb_helper_fini(fb_helper);
+err_drm_err:
+	drm_err(dev, "AOSC OS: NV-DRM: fbdev: Failed to setup emulation (ret=%d)\n", ret);
+	return ret;
+}
+
+static const struct drm_client_funcs nv_drm_fbdev_client_funcs = {
+	.owner		= THIS_MODULE,
+	.unregister	= nv_drm_fbdev_client_unregister,
+	.restore	= nv_drm_fbdev_client_restore,
+	.hotplug	= nv_drm_fbdev_client_hotplug,
+};
+#endif
 
 /*
  * Helper function for allocate/register DRM device for given NVIDIA GPU ID.
@@ -1952,6 +2014,7 @@
     struct nv_drm_device *nv_dev = NULL;
     struct drm_device *dev = NULL;
     struct device *device = gpu_info->os_device_ptr;
+    struct drm_fb_helper *fb_helper = NULL;
     bool bus_is_pci;
 
     DRM_DEBUG(
@@ -2013,17 +2076,37 @@
         if (bus_is_pci) {
             struct pci_dev *pdev = to_pci_dev(device);
 
+#if defined(NV_DRM_APERTURE_REMOVE_CONFLICTING_PCI_FRAMEBUFFERS_PRESENT)
+            printk(KERN_INFO "%s: using drm_aperture for old kernels\n", nv_drm_driver.name);
 #if defined(NV_DRM_APERTURE_REMOVE_CONFLICTING_PCI_FRAMEBUFFERS_HAS_DRIVER_ARG)
             drm_aperture_remove_conflicting_pci_framebuffers(pdev, &nv_drm_driver);
 #else
             drm_aperture_remove_conflicting_pci_framebuffers(pdev, nv_drm_driver.name);
 #endif
+#elif defined(NV_APERTURE_REMOVE_CONFLICTING_PCI_DEVICES_PRESENT)
+            printk(KERN_INFO "%s: using linux/aperture workaround for Linux 6.13+\n", nv_drm_driver.name);
+            aperture_remove_conflicting_pci_devices(pdev, nv_drm_driver.name);
+#endif
             nvKms->framebufferConsoleDisabled(nv_dev->pDevice);
         }
         #if defined(NV_DRM_FBDEV_TTM_AVAILABLE)
         drm_fbdev_ttm_setup(dev, 32);
         #elif defined(NV_DRM_FBDEV_GENERIC_AVAILABLE)
         drm_fbdev_generic_setup(dev, 32);
+        #else
+        // AOSC OS: Workaround for Linux 6.13+
+        int drm_client_ret;
+        fb_helper = kzalloc(sizeof(*fb_helper), GFP_KERNEL);
+        if (!fb_helper)
+            return;
+        drm_fb_helper_prepare(dev, fb_helper, 32, &nv_drm_fbdev_helper_funcs);
+        drm_client_ret = drm_client_init(dev, &fb_helper->client, "fbdev",
+                                         &nv_drm_fbdev_client_funcs);
+        if (drm_client_ret) {
+            drm_err(dev, "AOSC OS: NV-DRM: Failed to register DRM client: %d\n", drm_client_ret);
+            goto failed_drm_client_init;
+        }
+        drm_client_register(&fb_helper->client);
         #endif
     }
 #endif /* defined(NV_DRM_FBDEV_AVAILABLE) */
@@ -2035,6 +2118,10 @@
 
     return; /* Success */
 
+failed_drm_client_init:
+    drm_fb_helper_unprepare(fb_helper);
+    kfree(fb_helper);
+
 failed_drm_register:
 
     nv_drm_dev_free(dev);
diff '--color=auto' -aruN a/kernel-open/nvidia-drm/nvidia-drm-linux.c b/kernel-open/nvidia-drm/nvidia-drm-linux.c
--- a/kernel-open/nvidia-drm/nvidia-drm-linux.c	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/nvidia-drm/nvidia-drm-linux.c	2025-01-23 21:15:00.820284259 +0000
@@ -39,8 +39,12 @@
     fbdev,
     "Create a framebuffer device (1 = enable, 0 = disable (default)) (EXPERIMENTAL)");
 module_param_named(fbdev, nv_drm_fbdev_module_param, bool, 0400);
+#else
+#error "nvidia-drm fbdev should always be available."
 #endif
 
+#else
+#error "nvidia-drm is not available"
 #endif /* NV_DRM_AVAILABLE */
 
 /*************************************************************************
diff '--color=auto' -aruN a/kernel-open/nvidia-drm/nvidia-drm-os-interface.h b/kernel-open/nvidia-drm/nvidia-drm-os-interface.h
--- a/kernel-open/nvidia-drm/nvidia-drm-os-interface.h	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/nvidia-drm/nvidia-drm-os-interface.h	2025-01-23 21:15:00.820284259 +0000
@@ -63,11 +63,26 @@
 #define NV_DRM_FBDEV_GENERIC_AVAILABLE
 #endif
 
+#if defined(NV_DRM_FBDEV_GENERIC_SETUP_PRESENT) && defined(NV_APERTURE_REMOVE_CONFLICTING_PCI_DEVICES_PRESENT)
+#define NV_DRM_FBDEV_AVAILABLE
+#define NV_DRM_FBDEV_GENERIC_AVAILABLE
+#endif
+
 #if defined(NV_DRM_FBDEV_TTM_SETUP_PRESENT) && defined(NV_DRM_APERTURE_REMOVE_CONFLICTING_PCI_FRAMEBUFFERS_PRESENT)
 #define NV_DRM_FBDEV_AVAILABLE
 #define NV_DRM_FBDEV_TTM_AVAILABLE
 #endif
 
+#if defined(NV_DRM_FBDEV_TTM_SETUP_PRESENT) && defined(NV_APERTURE_REMOVE_CONFLICTING_PCI_DEVICES_PRESENT)
+#define NV_DRM_FBDEV_AVAILABLE
+#define NV_DRM_FBDEV_TTM_AVAILABLE
+#endif
+
+// AOSC OS: Always enable DRM fbdev
+// FIXME: Add config test for drm helper functions.
+// The implementation uses drm_client_register, which is added in v5.2-rc1.
+#define NV_DRM_FBDEV_AVAILABLE
+
 struct page;
 
 /* Set to true when the atomic modeset feature is enabled. */
diff '--color=auto' -aruN a/kernel-open/nvidia-drm/nvidia-drm-sources.mk b/kernel-open/nvidia-drm/nvidia-drm-sources.mk
--- a/kernel-open/nvidia-drm/nvidia-drm-sources.mk	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/nvidia-drm/nvidia-drm-sources.mk	2025-01-23 21:14:55.626775245 +0000
@@ -66,6 +66,7 @@
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += fence_set_error
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += sync_file_get_fence
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_aperture_remove_conflicting_pci_framebuffers
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += aperture_remove_conflicting_pci_devices
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_fbdev_generic_setup
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_fbdev_ttm_setup
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_connector_attach_hdr_output_metadata_property
diff '--color=auto' -aruN a/kernel-open/nvidia-modeset/nvidia-modeset.Kbuild b/kernel-open/nvidia-modeset/nvidia-modeset.Kbuild
--- a/kernel-open/nvidia-modeset/nvidia-modeset.Kbuild	2024-12-05 15:37:35.000000000 +0000
+++ b/kernel-open/nvidia-modeset/nvidia-modeset.Kbuild	2025-01-23 21:14:16.732129698 +0000
@@ -40,9 +40,6 @@
 NVIDIA_MODESET_BINARY_OBJECT := $(src)/nvidia-modeset/nv-modeset-kernel.o_binary
 NVIDIA_MODESET_BINARY_OBJECT_O := nvidia-modeset/nv-modeset-kernel.o
 
-quiet_cmd_symlink = SYMLINK $@
-cmd_symlink = ln -sf $< $@
-
 targets += $(NVIDIA_MODESET_BINARY_OBJECT_O)
 
 $(obj)/$(NVIDIA_MODESET_BINARY_OBJECT_O): $(NVIDIA_MODESET_BINARY_OBJECT) FORCE
diff '--color=auto' -aruN a/src/nvidia/src/kernel/rmapi/event_notification.c b/src/nvidia/src/kernel/rmapi/event_notification.c
--- a/src/nvidia/src/kernel/rmapi/event_notification.c	2024-12-05 15:37:35.000000000 +0000
+++ b/src/nvidia/src/kernel/rmapi/event_notification.c	2025-01-23 21:13:51.121269280 +0000
@@ -286,11 +286,11 @@
     portSyncSpinlockAcquire(pEventNotificationList->pSpinlock);
     {
         // We don't expect this to be called multiple times in parallel
-        NV_ASSERT_OR_ELSE(pEventNotificationList->pendingEventNotifyCount == 0,
+        if (pEventNotificationList->pendingEventNotifyCount != 0)
         {
             portSyncSpinlockRelease(pEventNotificationList->pSpinlock);
             return NV_ERR_INVALID_STATE;
-        });
+        }
 
         EngineEventNotificationListIter it =
             listIterAll(&pEventNotificationList->eventNotificationList);
diff '--color=auto' -aruN a/src/nvidia-modeset/Makefile b/src/nvidia-modeset/Makefile
--- a/src/nvidia-modeset/Makefile	2024-12-05 15:37:35.000000000 +0000
+++ b/src/nvidia-modeset/Makefile	2025-01-23 21:12:45.632417936 +0000
@@ -151,6 +151,7 @@
   CONDITIONAL_CFLAGS += $(call TEST_CC_ARG, -fno-jump-tables)
   CONDITIONAL_CFLAGS += $(call TEST_CC_ARG, -mindirect-branch=thunk-extern)
   CONDITIONAL_CFLAGS += $(call TEST_CC_ARG, -mindirect-branch-register)
+  CONDITIONAL_CFLAGS += $(call TEST_CC_ARG, -mharden-sls=all)
 endif
 
 CFLAGS += $(CONDITIONAL_CFLAGS)
diff '--color=auto' -aruN a/src/nvidia-modeset/src/nvkms-hdmi.c b/src/nvidia-modeset/src/nvkms-hdmi.c
--- a/src/nvidia-modeset/src/nvkms-hdmi.c	2024-12-05 15:37:35.000000000 +0000
+++ b/src/nvidia-modeset/src/nvkms-hdmi.c	2025-01-23 21:13:57.874829208 +0000
@@ -1046,27 +1046,13 @@
 
     if (status == NVT_STATUS_SUCCESS) {
         /*
-         * NvTiming_GetProductName() returns a nul-terminated string, but the
-         * string in the EDID is terminated with 0x0A and padded with 0x20.
-         * Put back these special characters.
+         * NvTiming_GetProductName returns a nul-terminated string. Figure out
+         * how long it is and copy the bytes up to, but not including, the nul
+         * terminator.
          */
-        NvBool pastTerminator = FALSE;
-        NvU32 i;
-
-        for (i = 0; i < NVT_EDID_LDD_PAYLOAD_SIZE; i++) {
-            if (pastTerminator) {
-                name[i] = 0x20;
-            }
-            if (name[i] == '\0') {
-                name[i] = 0x0A;
-                pastTerminator = TRUE;
-            }
-        }
-
-        monitorNameLen = NVT_EDID_LDD_PAYLOAD_SIZE;
-        pEld->buffer[4] |= NVT_EDID_LDD_PAYLOAD_SIZE;
-        nvkms_memcpy(&pEld->buffer[20], name,
-                     NVT_EDID_LDD_PAYLOAD_SIZE);
+        monitorNameLen = nvkms_strlen((char *)name);
+        pEld->buffer[4] |= monitorNameLen;
+        nvkms_memcpy(&pEld->buffer[20], name, monitorNameLen);
     }
 
     /* offset 20 + MNL ~ 20 + MNL + (3 * SAD_Count) - 1 : CEA_SADs */
